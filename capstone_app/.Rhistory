ggplot(aapl, aes(x = index(aapl), y = aapl[,6])) +
geom_line(color = "darkblue") + ggtitle("Apple prices series") + xlab("Date") + ylab("Price") + theme(plot.title = element_text(hjust = 0.5)) + scale_x_date(date_labels = "%b %y", date_breaks = "2 years")
ggplot(aapl_mm, aes(x = index(aapl_mm))) +
geom_line(aes(y = aapl_mm[,6], color = "aapl")) + ggtitle("Apple prices series") +
geom_line(aes(y = aapl_mm$mm10, color = "MM10")) +
geom_line(aes(y = aapl_mm$mm30, color = "MM30")) + xlab("Date") + ylab("Price") +
theme(plot.title = element_text(hjust = 0.5), panel.border = element_blank()) +
scale_x_date(date_labels = "%b %y", date_breaks = "3 months") +
scale_colour_manual("Series", values=c("aapl"="gray40", "MM10"="firebrick4", "MM30"="darkcyan"))
require(smooth)
require(Mcomp)
install.packages(Mcopm)
install.packages(Mcomp)
install.packages("Mcomp")
require(Mcomp)
sma(aapl)
sma(aapl[,6])
plot(sma(aapl[,6]))
plot(sma(aapl[,6]),h=18,silent=FALSE)
init <- as.Date("2019-01-01")
end <- as.Date("2020-10-31")
start_range <- bizdays::bizdays(init_date, init, 'QuantLib/UnitedStates/NYSE')+1
end_range <- start_range + bizdays::bizdays(init, end, 'QuantLib/UnitedStates/NYSE')-1
aapl[,6][c(start_range,end_range)]
aapl[,6][c(start_range:end_range)]
selected_data <- aapl[,6][c(start_range:end_range)]
?sma
sma(selected_data)
sma_aapl <- sma(selected_data)
plot(sma_aapl)
plot(sma_aapl$fitted)
sma_aapl$forecast
plot(sma_aapl$forecast)
?sma
sma_aapl <- sma(selected_data,h=20, holdout = TRUE)
sma_aapl
sma_aapl$forecast
plot(sma_aapl)
sma_aapl <- sma(selected_data,h=20, holdout = TRUE, silent = FALSE)
sma(selected_data,h=20, holdout = TRUE, silent = FALSE)
sma(selected_data,h=10, holdout = TRUE, silent = FALSE)
ggplot(aapl, aes(x = index(aapl), y = aapl[,6])) +
geom_line(color = "darkblue") + ggtitle("Apple prices series") +
xlab("Date") + ylab("Price") + theme(plot.title = element_text(hjust = 0.5)) +
scale_x_date(date_labels = "%b %y", date_breaks = "2 years")
aapl_mm <- subset(aapl, index(aapl) >= "2019-01-01")
aapl_mm10 <- rollmean(aapl_mm[,6], 10, fill = list(NA, NULL, NA), align = "right")
aapl_mm30 <- rollmean(aapl_mm[,6], 30, fill = list(NA, NULL, NA), align = "right")
aapl_mm$mm10 <- coredata(aapl_mm10)
aapl_mm$mm30 <- coredata(aapl_mm30)
ggplot(aapl_mm, aes(x = index(aapl_mm))) +
geom_line(aes(y = aapl_mm[,6], color = "aapl")) + ggtitle("Apple prices series") +
geom_line(aes(y = aapl_mm$mm10, color = "MM10")) +
geom_line(aes(y = aapl_mm$mm30, color = "MM30")) + xlab("Date") + ylab("Price") +
theme(plot.title = element_text(hjust = 0.5), panel.border = element_blank()) +
scale_x_date(date_labels = "%b %y", date_breaks = "3 months") +
scale_colour_manual("Series", values=c("aapl"="gray40", "MM10"="firebrick4", "MM30"="darkcyan"))
aapl_mm10
?rollmean
aapl_mm10 <- rollmean(aapl_mm[,6], 10, fill = list(NA, NULL, "extend"), align = "right")
aapl_mm30 <- rollmean(aapl_mm[,6], 30, fill = list(NA, NULL, "extend"), align = "right")
?rollmean
aapl_mm$mm10 <- coredata(aapl_mm10)
aapl_mm$mm30 <- coredata(aapl_mm30)
ggplot(aapl_mm, aes(x = index(aapl_mm))) +
geom_line(aes(y = aapl_mm[,6], color = "aapl")) + ggtitle("Apple prices series") +
geom_line(aes(y = aapl_mm$mm10, color = "MM10")) +
geom_line(aes(y = aapl_mm$mm30, color = "MM30")) + xlab("Date") + ylab("Price") +
theme(plot.title = element_text(hjust = 0.5), panel.border = element_blank()) +
scale_x_date(date_labels = "%b %y", date_breaks = "3 months") +
scale_colour_manual("Series", values=c("aapl"="gray40", "MM10"="firebrick4", "MM30"="darkcyan"))
aapl_mm10 <- rollmean(aapl_mm[,6], 10, fill = list(NA, NULL, "extend"), align = "right")
View(aapl_mm10)
aapl_mm101 <- rollmean(aapl_mm[,6], 10, fill = list(NA, NULL, NA), align = "right")
View(aapl_mm101)
aapl_mm102 <- rollmean(aapl_mm[,6], 10, fill = list(NA, NULL, "extend"), align = "right")
View(aapl_mm102)
init <- as.Date("2019-01-01")
end <- as.Date("2019-01-01")
start_range <- bizdays::bizdays(init_date, init, 'QuantLib/UnitedStates/NYSE')+1
end_range <- start_range + bizdays::bizdays(init, end, 'QuantLib/UnitedStates/NYSE')-1
selected_data <- aapl[,6][c(start_range:end_range)]
sma(selected_data,h=10, holdout = TRUE, silent = FALSE)
end <- as.Date("2019-12-31")
start_range <- bizdays::bizdays(init_date, init, 'QuantLib/UnitedStates/NYSE')+1
end_range <- start_range + bizdays::bizdays(init, end, 'QuantLib/UnitedStates/NYSE')-1
mean(dailyReturn(AAPL))
selected_data <- aapl[,6][c(start_range:end_range)]
sma(selected_data,h=10, holdout = TRUE, silent = FALSE)
end <- as.Date("2019-01-31")
start_range <- bizdays::bizdays(init_date, init, 'QuantLib/UnitedStates/NYSE')+1
end_range <- start_range + bizdays::bizdays(init, end, 'QuantLib/UnitedStates/NYSE')-1
mean(dailyReturn(AAPL))
selected_data <- aapl[,6][c(start_range:end_range)]
sma(selected_data,h=10, holdout = TRUE, silent = FALSE)
?rollmean
plot(selected_data)
?sma
sma_out <- sma(selected_data,h=10, holdout = TRUE, silent = FALSE)
summary(sma_out)
selected_data
c(selected_data)
install.packages("TTR")
install.packages("TTR")
library(TTR)
TTR::SMA(selected_data,n=10)
plot(TTR::SMA(selected_data,n=10))
?TTR::SMA
sma_ttr <- TTR::SMA(selected_data,n=10)
forecast(sma_ttr)
forecast::forecast(sma_ttr)
?forecast:::forecast
plot(forecast:::forecast(sma_ttr))
holtwinters_stock <- HoltWinters(AAPL$AAPL.Adjusted[c(start_range:end_range)], beta = FALSE, gamma=FALSE)
end <- as.Date("2019-12-31")
holtwinters_stock <- HoltWinters(aapl$AAPL.Adjusted[c(start_range:end_range)], beta = FALSE, gamma=FALSE)
?holtwinters_stock
?HoltWinters
holtwinters_stock <- HoltWinters(aapl$AAPL.Adjusted[c(start_range:end_range)], gamma=FALSE)
holtwinters_stock
plot(holtwinters_stock)
forecast_stock <- forecast:::forecast.HoltWinters(holtwinters_stock, h=1000)
plot(forecast_stock)
forecast_stock <- forecast:::forecast.HoltWinters(holtwinters_stock, h=10)
plot(forecast_stock)
print(forecast_stock)
init <- as.Date("2019-01-01")
end <- as.Date("2019-12-31")
holtwinters_stock <- HoltWinters(aapl$AAPL.Adjusted[c(start_range:end_range)], gamma=FALSE)
holtwinters_stock
plot(holtwinters_stock)
holtwinters_stock$fitted
print(holtwinters_stock)
forecast_stock <- forecast:::forecast.HoltWinters(holtwinters_stock, h=10)
plot(forecast_stock)
forecast_stock <- forecast:::forecast.HoltWinters(holtwinters_stock, h=1)
plot(forecast_stock)
init <- as.Date("2019-01-01")
end <- as.Date("2019-12-31")
start_range <- bizdays::bizdays(init_date, init, 'QuantLib/UnitedStates/NYSE')+1
end_range <- start_range + bizdays::bizdays(init, end, 'QuantLib/UnitedStates/NYSE')-1
holtwinters_stock <- HoltWinters(aapl$AAPL.Adjusted[c(start_range:end_range)], gamma=FALSE)
holtwinters_stock
plot(holtwinters_stock)
aapl$AAPL.Adjusted[c(start_range:end_range)
aapl$AAPL.Adjusted[c(start_range:end_range)]
aapl$AAPL.Adjusted[c(start_range:end_range)]
start_range <- bizdays::bizdays(init_date, init, 'QuantLib/UnitedStates/NYSE')+1
end_range <- start_range + bizdays::bizdays(init, end, 'QuantLib/UnitedStates/NYSE')-1
holtwinters_stock <- HoltWinters(aapl$AAPL.Adjusted[c(start_range:end_range)], gamma=FALSE)
holtwinters_stock
plot(holtwinters_stock)
start_range <- bizdays::bizdays(init_date, init, 'QuantLib/UnitedStates/NYSE')+1
end_range <- start_range + bizdays::bizdays(init, end, 'QuantLib/UnitedStates/NYSE')-1
load_quantlib_calendars('UnitedStates/NYSE',from=init_date, to=end_date)
start_range <- bizdays::bizdays(init_date, init, 'QuantLib/UnitedStates/NYSE')+1
end_range <- start_range + bizdays::bizdays(init, end, 'QuantLib/UnitedStates/NYSE')-1
load_quantlib_calendars('UnitedStates/NYSE',from=init_date, to=end_date)
library(RQuantLib)
load_quantlib_calendars('UnitedStates/NYSE',from=init_date, to=end_date)
library(RQuantLib)
load_quantlib_calendars('UnitedStates/NYSE',from=init_date, to=end_date)
library(RQuantLib)
library(bizdays)
library(quantmod)
library(xts)
library(forecast)
library(ggplot2)
require(smooth)
require(Mcomp)
library(TTR)
install.packages("Mcomp")
install.packages("Mcomp")
init_date = as.Date("2000-01-01")
end_date = as.Date("2020-11-03")
load_quantlib_calendars('UnitedStates/NYSE',from=init_date, to=end_date)
init <- as.Date("2019-01-01")
end <- as.Date("2019-12-31")
start_range <- bizdays::bizdays(init_date, init, 'QuantLib/UnitedStates/NYSE')+1
end_range <- start_range + bizdays::bizdays(init, end, 'QuantLib/UnitedStates/NYSE')-1
holtwinters_stock <- HoltWinters(aapl$AAPL.Adjusted[c(start_range:end_range)], gamma=FALSE)
holtwinters_stock
plot(holtwinters_stock)
holtwinters_stock$fitted
print(holtwinters_stock)
forecast_stock <- forecast:::forecast.HoltWinters(holtwinters_stock, h=1)
plot(forecast_stock)
forecast_stock <- forecast:::forecast.HoltWinters(holtwinters_stock, h=10)
plot(forecast_stock)
forecast_stock <- forecast:::forecast.HoltWinters(holtwinters_stock, h=20)
plot(forecast_stock)
print(forecast_stock)
algorithm_names <- c("Holt's Exponential Smoothing")
SMA(aapl$AAPL.Adjusted[c(start_range:end_range)],n=10)
plot(SMA(aapl$AAPL.Adjusted[c(start_range:end_range)],n=10))
library(shiny); runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
getSymbols("AAPL", src = "yahoo", from = init_data, to = end_data)
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
init_data <- as.Date("2000-01-01")
end_data <- as.Date("2020-10-31")
algorithm_names <- c("Holt's Exponential Smoothing")
load_quantlib_calendars('UnitedStates/NYSE',from='2000-01-01', to='2020-11-03')
investing_options <- c("Apple", "Google")
symbols <- c("AAPL", "GOOG")
for (symbol in symbols) {
getSymbols(symbol, src = "yahoo", from = init_data, to = end_data )
}
fitted_stock <- HoltWinters(AAPL$AAPL.Adjusted[c(start_range():end_range())], gamma=FALSE)
start_range() <- bizdays::bizdays(init_data, input$start_date, 'QuantLib/UnitedStates/NYSE')+1
start_range() <- bizdays::bizdays(init_data, as.Date("2019-01-01"), 'QuantLib/UnitedStates/NYSE')+1
start_range() <- bizdays::bizdays(init_data, as.Date("2019-01-01"), 'QuantLib/UnitedStates/NYSE')+1
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
aapl <- getSymbols("GOOG", src = "yahoo", from = init_date, to = end_date, auto.assign = FALSE )
init_date = as.Date("2000-01-01")
end_date = as.Date("2020-11-03")
load_quantlib_calendars('UnitedStates/NYSE',from=init_date, to=end_date)
aapl <- getSymbols("GOOG", src = "yahoo", from = init_date, to = end_date, auto.assign = FALSE )
getSymbols("GOOG", src = "yahoo", from = init_date, to = end_date)
fitted_stock <- HoltWinters(GOOG$GOOG.Adjusted[c(start_range():end_range())], gamma=FALSE)
init <- as.Date("2019-01-01")
end <- as.Date("2019-12-31")
start_range <- bizdays::bizdays(init_date, init, 'QuantLib/UnitedStates/NYSE')+1
end_range <- start_range + bizdays::bizdays(init, end, 'QuantLib/UnitedStates/NYSE')-1
fitted_stock <- HoltWinters(GOOG$GOOG.Adjusted[c(start_range():end_range())], gamma=FALSE)
start_range <- bizdays::bizdays(init_date, init, 'QuantLib/UnitedStates/NYSE')+1
end_range <- start_range + bizdays::bizdays(init, end, 'QuantLib/UnitedStates/NYSE')-1
fitted_stock <- HoltWinters(GOOG$GOOG.Adjusted[c(start_range():end_range())], gamma=FALSE)
fitted_stock <- HoltWinters(GOOG$GOOG.Adjusted[c(start_range:end_range], gamma=FALSE)
fitted_stock <- HoltWinters(GOOG$GOOG.Adjusted[c(start_range:end_range)], gamma=FALSE)
index(GOOG)
index(GOOG[0])
index(GOOG[1])
runApp('Documents/GitHub/shiny.rstudio.com-tutorial/part-1-code')
for (symbol in symbols) {
getSymbols(symbol, src = "yahoo")
}
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
(1 in [1])
?grepl
grepl(1,[1])
(1 in c(1))
1 in 1
if (1 in c(1)){}
grepl(1,c(1,))
grepl(1,c(1))
grepl("Apple","Apple,Google")
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
getSymbols("GOOG", src ="yahoo")
init <- as.Date("2019-01-01")
end <- as.Date("2019-12-31")
start_range <- bizdays::bizdays(index(GOOG[1]), init, 'QuantLib/UnitedStates/NYSE')+1
end_range <- start_range + bizdays::bizdays(init, end, 'QuantLib/UnitedStates/NYSE')-1
fitted_stock <- HoltWinters(GOOG$GOOG.Adjusted[c(start_range:end_range)], gamma=FALSE)
stock_forecast <- forecast:::forecast.HoltWinters(fitted_stock, h=20)
forecast:::plot.forecast(stock_forecast)
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
forecast:::forecast(stock_forecast)
ggplot(forecast:::forecast(stock_forecast))
stock_forecast <- forecast:::forecast.HoltWinters(fitted_stock, h=20)
forecast:::plot.forecast(stock_forecast)
stock_forecast
ggplot(stock_forecast)
stock_forecast
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
fitted_stock <- HoltWinters(GOOG$GOOG.Adjusted[c(start_range:end_range)], gamma=FALSE)
stock_forecast <- forecast:::forecast.HoltWinters(fitted_stock, h=1)
forecast:::plot.forecast(stock_forecast)
stock_forecast <- forecast:::forecast.HoltWinters(fitted_stock, h=5)
forecast:::plot.forecast(stock_forecast)
stock_forecast <- forecast:::forecast.HoltWinters(fitted_stock, h=50)
forecast:::plot.forecast(stock_forecast)
stock_forecast <- forecast:::forecast.HoltWinters(fitted_stock, h=20)
forecast:::plot.forecast(stock_forecast)
stock_forecast
stock_forecast$forecast
stock_forecast$forecasts
stock_forecast$fitted
stock_forecast
stock_forecast[0]
stock_forecast[1]
stock_forecast[2]
stock_forecast[3]
stock_forecast[4]
stock_forecast[5]
stock_forecast$x
stock_forecast$method
stock_forecast["Point Forecast"]
stock_forecast
stock_forecast[1]
stock_forecast[1,]
stock_forecast
stock_forecast[252]
stock_forecast
stock_forecast$forecasted
stock_forecast$predicted
a<-stock_forecast
stock_forecast$mean
stock_forecast$lower["95%"]
stock_forecast$lower
stock_forecast$lower$95%
stock_forecast$lower[,2]
?lapply()
point_predictions <- stock_forecast$mean
lapply(point_predictions,+2)
lapply(point_predictions,(x) { x+1})
lapply(point_predictions,function(x){ x+1})
function
returns <-
?mapply())
returns <-
?mapply()
returns <-
?mapply()
?mapply
maaply(function(x,y) {(y-x)/x}, c(10,11,5.5), c(11,5.5,10))
mapply(function(x,y) {(y-x)/x}, c(10,11,5.5), c(11,5.5,10))
rollapply(c(10,11,5.5))
rollapply(c(10,11,5.5),1)
rollmean(c(1,2,3))
rollmean(c(1,2,3),1)
rollmean(c(1,2,3),2)
?rollmean
?shift
?shift
shift(c(1,2))
lag(c(1,2,3))
lag(c(1,2,3),1)
?lag
lag(c(1,2,3),n=2)
dplyr::lag(c(1,2,3),n=2)
dplyr::lag(c(1,2,3),n=1)
lead(1:10,1)
dplyer::lead(1:10,1)
dplyr::lead(1:10,1)
mapply(function(x,y) {(y-x)/x}, c(10,11,5.5), dplyr::lag(c(10,11,5.5),1))
mapply(function(x,y) {(y-x)/x}, c(10,11,5.5), dplyr::lead(c(10,11,5.5),1))
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
mapply(function(x,y) {(y-x)/x}, point_predictions, dplyr::lead(point_predictions,1))
tail(point_predictions)
tail(point_predictions)[1]
returns <- mapply(function(x,y) {(y-x)/x}, point_predictions, dplyr::lead(point_predictions,1))
returns
c <- c()
for (i in 1:10) {}
for (i in 1:10) {
append(c,i)
}
c
c.append(1)
for (i in 1:10) {
c <- append(c,i)
}
repeat(1,10)
?repeat
?
ad
?repeat
portfolio_prediction_appl = rep
?repeat
asf
repeat(1)
c(1:10)
c(1:10)*0
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
symbols <- c("AAPL", "GOOG")
for (symbol in symbols) {
getSymbols(symbol, src = "yahoo")
}
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
ggplot(aapl, aes(x = index(aapl), y = aapl[,6])) +
geom_line(color = "darkblue") + ggtitle("Apple prices series") +
xlab("Date") + ylab("Price") + theme(plot.title = element_text(hjust = 0.5)) +
scale_x_date(date_labels = "%b %y", date_breaks = "2 years")
aapl_mm <- subset(aapl, index(aapl) >= "2019-01-01")
aapl_mm102 <- rollmean(aapl_mm[,6], 10, fill = list(NA, NULL, NA), align = "right")
aapl_mm30 <- rollmean(aapl_mm[,6], 30, fill = list(NA, NULL, NA), align = "right")
?rollmean
aapl_mm$mm10 <- coredata(aapl_mm10)
aapl_mm$mm30 <- coredata(aapl_mm30)
ggplot(aapl_mm, aes(x = index(aapl_mm))) +
geom_line(aes(y = aapl_mm[,6], color = "aapl")) + ggtitle("Apple prices series") +
geom_line(aes(y = aapl_mm$mm10, color = "MM10")) +
geom_line(aes(y = aapl_mm$mm30, color = "MM30")) + xlab("Date") + ylab("Price") +
theme(plot.title = element_text(hjust = 0.5), panel.border = element_blank()) +
scale_x_date(date_labels = "%b %y", date_breaks = "3 months") +
scale_colour_manual("Series", values=c("aapl"="gray40", "MM10"="firebrick4", "MM30"="darkcyan"))
?HoltWinters
ggplot(aapl_mm, aes(x = index(aapl_mm))) +
geom_line(aes(y = aapl_mm[,6], color = "aapl")) + ggtitle("Apple prices series") +
geom_line(aes(y = aapl_mm$mm10, color = "MM10")) +
geom_line(aes(y = aapl_mm$mm30, color = "MM30")) + xlab("Date") + ylab("Price") +
theme(plot.title = element_text(hjust = 0.5), panel.border = element_blank()) +
scale_x_date(date_labels = "%b %y", date_breaks = "3 months") +
scale_colour_manual("Series", values=c("aapl"="gray40", "MM10"="firebrick4", "MM30"="darkcyan"))
forecast_stock <- forecast:::forecast.HoltWinters(holtwinters_stock, h=20)
plot(forecast_stock)
print(forecast_stock)
plot(SMA(aapl$AAPL.Adjusted[c(start_range:end_range)],n=10))
ggplot(aapl, aes(x = index(aapl), y = aapl[,6])) +
geom_line(color = "darkblue") + ggtitle("Apple prices series") +
xlab("Date") + ylab("Price") + theme(plot.title = element_text(hjust = 0.5)) +
scale_x_date(date_labels = "%b %y", date_breaks = "2 years")
aapl_mm <- subset(aapl, index(aapl) >= "2019-01-01")
plot(SMA(aapl$AAPL.Adjusted[c(start_range:end_range)],n=10))
ggplot(aapl, aes(x = index(aapl), y = aapl[,6])) +
geom_line(color = "darkblue") + ggtitle("Apple prices series") +
xlab("Date") + ylab("Price") + theme(plot.title = element_text(hjust = 0.5)) +
scale_x_date(date_labels = "%b %y", date_breaks = "2 years")
aapl <- getSymbols("GOOG", src = "yahoo", from = init_date, to = end_date, auto.assign = FALSE )
aapl <- getSymbols("GOOG", src = "yahoo", from = '2000-01-01', to = '2020-11-03', auto.assign = FALSE )
holtwinters_stock <- HoltWinters(aapl$AAPL.Adjusted[c(start_range:end_range)], gamma=FALSE)
holtwinters_stock
ggplot(aapl, aes(x = index(aapl), y = aapl[,6])) +
geom_line(color = "darkblue") + ggtitle("Apple prices series") +
xlab("Date") + ylab("Price") + theme(plot.title = element_text(hjust = 0.5)) +
scale_x_date(date_labels = "%b %y", date_breaks = "2 years")
aapl_mm <- subset(aapl, index(aapl) >= "2019-01-01")
aapl_mm102 <- rollmean(aapl_mm[,6], 10, fill = list(NA, NULL, NA), align = "right")
aapl_mm30 <- rollmean(aapl_mm[,6], 30, fill = list(NA, NULL, NA), align = "right")
aapl_mm$mm10 <- coredata(aapl_mm10)
aapl_mm$mm30 <- coredata(aapl_mm30)
ggplot(aapl_mm, aes(x = index(aapl_mm))) +
geom_line(aes(y = aapl_mm[,6], color = "aapl")) + ggtitle("Apple prices series") +
geom_line(aes(y = aapl_mm$mm10, color = "MM10")) +
geom_line(aes(y = aapl_mm$mm30, color = "MM30")) + xlab("Date") + ylab("Price") +
theme(plot.title = element_text(hjust = 0.5), panel.border = element_blank()) +
scale_x_date(date_labels = "%b %y", date_breaks = "3 months") +
scale_colour_manual("Series", values=c("aapl"="gray40", "MM10"="firebrick4", "MM30"="darkcyan"))
ggplot(aapl_mm, aes(x = index(aapl_mm))) +
geom_line(aes(y = aapl_mm[,6], color = "aapl")) + ggtitle("Apple prices series") +
geom_line(aes(y = aapl_mm$mm10, color = "MM10")) +
geom_line(aes(y = aapl_mm$mm30, color = "MM30")) + xlab("Date") + ylab("Price") +
theme(plot.title = element_text(hjust = 0.5), panel.border = element_blank()) +
scale_x_date(date_labels = "%b %y", date_breaks = "3 months") +
scale_colour_manual("Series", values=c("aapl"="gray40", "MM10"="firebrick4", "MM30"="darkcyan"))
aapl_mm$mm10 <- coredata(aapl_mm10)
aapl_mm$mm30 <- coredata(aapl_mm30)
ggplot(aapl_mm, aes(x = index(aapl_mm))) +
geom_line(aes(y = aapl_mm[,6], color = "aapl")) + ggtitle("Apple prices series") +
geom_line(aes(y = aapl_mm$mm10, color = "MM10")) +
geom_line(aes(y = aapl_mm$mm30, color = "MM30")) + xlab("Date") + ylab("Price") +
theme(plot.title = element_text(hjust = 0.5), panel.border = element_blank()) +
scale_x_date(date_labels = "%b %y", date_breaks = "3 months") +
scale_colour_manual("Series", values=c("aapl"="gray40", "MM10"="firebrick4", "MM30"="darkcyan"))
aapl_mm30 <- rollmean(aapl_mm[,6], 30, fill = list(NA, NULL, NA), align = "right")
runApp('Documents/GitHub/Capstone/App')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='jccf12', token='09201AA2AA907AA744F0AA46EBB55804', secret='jHiPFdSBjtr7LrrsO+ss8No1F2QLNanxVZfj4GLm')
library(rsconnect)
rsconnect::deployApp('/Users/juan/Documents/GitHub/Capstone/App')
rsconnect::deployApp('/Users/juan/Documents/GitHub/Capstone/App')
rsconnect::deployApp('/Users/juan/Documents/GitHub/Capstone/App/app.r')
rsconnect::deployApp('/Users/juan/Documents/GitHub/Capstone/capstone_pp')
rsconnect::deployApp('/Users/juan/Documents/GitHub/Capstone/capstone_app')
shiny::runApp('Documents/GitHub/Capstone/capstone_app')
library(rsconnect)
rsconnect::deployApp('/Users/juan/Documents/GitHub/Capstone/capstone_app')
rsconnect::deployApp('/Users/juan/Documents/GitHub/Capstone/capstone_app')
rsconnect::deployApp('/Users/juan/Documents/GitHub/Capstone/capstone_app')
Error building RQuantLib (0.4.11)
rsconnect::deployApp('/Users/juan/Documents/GitHub/Capstone/capstone_app')
rsconnect::appDependencies()
rsconnect::appDependencies('/Users/juan/Documents/GitHub/Capstone/capstone_app')
update.packages(checkBuilt = TRUE, ask = FALSE, repos = "https://cran.rstudio.com")
rsconnect::deployApp('/Users/juan/Documents/GitHub/Capstone/capstone_app')
# app
install.packages("callr")
install.packages("pkgbuild")
rsconnect::deployApp('/Users/juan/Documents/GitHub/Capstone/capstone_app')
library(callr)
library(callr)
library(pckbuild)
library('pckbuild')
library('pkgbuild')
library(pkgbuild)
install.packages("pkgbuild")
install.packages("callr")
install.packages("pkgbuild")
library(callr)
library(pkgbuild)
rsconnect::deployApp('/Users/juan/Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
install.packages("callr")
shiny::runApp()
