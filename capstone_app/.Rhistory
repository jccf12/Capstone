scale_colour_manual("Series", values=c("goog"="gray40", "MM10"="firebrick4", "MM30"="darkcyan"))
#calculating moving averages
goog_mm <- subset(goog, index(goog) >= "2016-01-01")
#calculating moving averages
goog_mm <- subset(GOOG, index(goog) >= "2016-01-01")
goog_mm10 <- rollmean(goog_mm[,6], 10, fill = list(NA, NULL, NA), align = "right")
goog_mm30 <- rollmean(goog_mm[,6], 30, fill = list(NA, NULL, NA), align = "right")
goog_mm$mm10 <- coredata(goog_mm10)
#calculating moving averages
goog_mm <- subset(GOOG, index(goog) >= "2016-01-01")
index(GOOG)
#calculating moving averages
goog_mm <- subset(GOOG, index(GOOG) >= "2016-01-01")
goog_mm10 <- rollmean(goog_mm[,6], 10, fill = list(NA, NULL, NA), align = "right")
goog_mm30 <- rollmean(goog_mm[,6], 30, fill = list(NA, NULL, NA), align = "right")
goog_mm$mm10 <- coredata(goog_mm10)
goog_mm$mm30 <- coredata(goog_mm30)
#plotting moving averages
ggplot(goog_mm, aes(x = index(goog_mm))) +
geom_line(aes(y = goog_mm[,6], color = "goog")) + ggtitle("Petrobras prices series") +
geom_line(aes(y = goog_mm$mm10, color = "MM10")) +
geom_line(aes(y = goog_mm$mm30, color = "MM30")) + xlab("Date") + ylab("Price") +
theme(plot.title = element_text(hjust = 0.5), panel.border = element_blank()) +
scale_x_date(date_labels = "%b %y", date_breaks = "3 months") +
scale_colour_manual("Series", values=c("goog"="gray40", "MM10"="firebrick4", "MM30"="darkcyan"))
#calculating moving averages
goog_mm <- subset(GOOG, index(GOOG) >= "2018-01-01")
goog_mm10 <- rollmean(goog_mm[,6], 10, fill = list(NA, NULL, NA), align = "right")
goog_mm30 <- rollmean(goog_mm[,6], 30, fill = list(NA, NULL, NA), align = "right")
goog_mm$mm10 <- coredata(goog_mm10)
goog_mm$mm30 <- coredata(goog_mm30)
#plotting moving averages
ggplot(goog_mm, aes(x = index(goog_mm))) +
geom_line(aes(y = goog_mm[,6], color = "goog")) + ggtitle("Petrobras prices series") +
geom_line(aes(y = goog_mm$mm10, color = "MM10")) +
geom_line(aes(y = goog_mm$mm30, color = "MM30")) + xlab("Date") + ylab("Price") +
theme(plot.title = element_text(hjust = 0.5), panel.border = element_blank()) +
scale_x_date(date_labels = "%b %y", date_breaks = "3 months") +
scale_colour_manual("Series", values=c("goog"="gray40", "MM10"="firebrick4", "MM30"="darkcyan"))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
table(GOOG)
runApp()
table(head(GOOG))
table(index(GOOG),GOOG.Open)
table(index(GOOG),GOOG.GOOG.Open)
GOOG["GOOG.Open"]
table(index(GOOG),GOOG[,"GOOG.Open"])
table(["1,2,3"],["4,5,6"])
table([1,2,3],[4,5,6])
tabulate(subset(GOOG, index(GOOG) >= "2020-08-01"))
tabulate(GOOG)
GOOG
head(GOOG)
rbind(head(GOOG,1),head(AAPL,1))
getSymbols("AAPL", src = "yahoo")
rbind(head(GOOG,1),head(AAPL,1))
cbind(rbind(index(GOOG),index(AAPL)),rbind(head(GOOG,1),head(AAPL,1)))
rbind(index(head(GOOG,1)),index(head(AAPL,1)))
index(head(GOOG,1))
g <- head(GOOG,5)
g %>% mutate(id = row_number())
library(dplyr)
g %>% mutate(id = row_number())
tibble::rowid_to_column(g, "ID")
type(g)
typeof(g)
g
data.frame(g)
gg <- data.frame(g)
typeof(gg)
gg
tibble::rowid_to_column(gg, "ID")
gg.dates
gg.date
gg.dates()
g[dates]
g.dates
g.date
dates(g)
date(g)
g.Date()
index(g)
a <- head(AAPL,1)
index(a)
a <- head(AAPL,5)
a
rbind(index(g),index(g))
index(g)
rbind(head(GOOG,1),head(AAPL,1))
head(GOOG,1).indexDate
index(head(GOOG,1))
head(GOOG)
monthlyReturn(GOOG)
dailyReturn(GOOG)
tail(dailyReturn(GOOG))
head(GOOG,1)["Adjusted"]
head(GOOG,1)[,"Adjusted"]
head(GOOG,1)[,"Close.Adjusted"]
head(GOOG)
head(GOOG,1)[,"GOOG.Adjusted"]
head(GOOG,1)[,"GOOG.Adjusted","GOOG.Open"]
head(GOOG,1)[,c("GOOG.Adjusted","GOOG.Open")]
head(GOOG,1)[c("GOOG.Adjusted","GOOG.Open")]
head(GOOG,1)[,c("GOOG.Adjusted","GOOG.Open","index")]
head(GOOG,1)[,c("GOOG.Adjusted","GOOG.Open","ID")]
head(GOOG,1)[,c("GOOG.Adjusted","GOOG.Open","I")]
head(GOOG,1)[,c("GOOG.Adjusted","GOOG.Open","id")]
head(GOOG,1)[,c("GOOG.Adjusted","GOOG.Open","index")]
index(GOOG)
g <- head(GOOG,1)
cbind(g[,"GOOG.Adjusted"],index(g))
cbind(g[,"GOOG.Adjusted"])
index(g)
cbind(g[,"GOOG.Adjusted"],tail(dailyReturn(GOOG),1))
g<- tail(GOOG,1)
cbind(g[,"GOOG.Adjusted"],tail(dailyReturn(GOOG),1))
cbind(g[,"GOOG.Adjusted"],tail(dailyReturn(GOOG),1))
g<- tail(GOOG,1)
g<- tail(GOOG,2)
g
g[2,"GOOG.Adjusted"]
g.index()
g.ID
g.ID()
g.index
g
xts1 <- xts(x=1:10, order.by=Sys.Date()-1:10)
Sys.Date()
Sys.Date()-1
Sys.Date()-1:10
24-1:10
24:1-
s3
24:10
24+1:10
xts(g[2,"GOOG.Adjusted"]-g[1,"GOOG.Adjusted"],order.by=index(g[2,"GOOG.Adjusted"]))
[1]
24:24
xts(g[2,"GOOG.Adjusted"]-g[1,"GOOG.Adjusted"],order.by=index(g[2,"GOOG.Adjusted"]):index(g[2,"GOOG.Adjusted"]))
index(g[2,"GOOG.Adjusted"])
as.Date(index(g[2,"GOOG.Adjusted"]))
24:0
24+0:1
24+0:0
24:0
24+1:0
24+5:0
24+0:5
24+2:4
as.Date(index(g[2,"GOOG.Adjusted"]))+0:0
xts(g[2,"GOOG.Adjusted"]-g[1,"GOOG.Adjusted"],order.by=as.Date(index(g[2,"GOOG.Adjusted"]))+0:0)
xts(g[2,"GOOG.Adjusted"]-g[1,"GOOG.Adjusted"])
g[2,"GOOG.Adjusted"]-g[1,"GOOG.Adjusted"]
g[2,"GOOG.Adjusted"]
g[2,"GOOG.Adjusted"].values
values(g[2,"GOOG.Adjusted"])
dates(g[2,"GOOG.Adjusted"])
g[2,"GOOG.Adjusted"]
g[2,"GOOG.Adjusted"].extract()
g[2,"GOOG.Adjusted"][1]
g[2,"GOOG.Adjusted"][1][1]
g[2,"GOOG.Adjusted"]-g[1,"GOOG.Adjusted"]
as.numeric(g[2,"GOOG.Adjusted"])
xts(as.numeric(g[2,"GOOG.Adjusted"])-as.numeric(g[1,"GOOG.Adjusted"])+0:0,order.by=as.Date(index(g[2,"GOOG.Adjusted"]))+0:0)
diff <- xts(as.numeric(g[2,"GOOG.Adjusted"])-as.numeric(g[1,"GOOG.Adjusted"])+0:0,order.by=as.Date(index(g[2,"GOOG.Adjusted"]))+0:0)
names(diff) <-
a
names(diff)
names(diff) <- c("a")
diff
names(diff) <- c("Change")
c <- xts(as.numeric(diff)/as.numeric(g[1,"GOOG.Adjusted"]),order.by = as.Date(index(g[2,"GOOG.Adjusted"]))+0:0)
c
cbind(g[2,"GOOG.Adjusted"],diff,c)
disp <- cbind(g[2,"GOOG.Adjusted"],diff,c)
names(disp) <- c("Last","Change","Change(%)")
disp
runApp()
library(hash)
install.packages("hash")
library(hash)
a <- hash()
a['first'] = 1
a
hash['GOOG'] <- getSymbols("GOOG", src = "yahoo", auto.assign = FALSE)
goog <-getSymbols("GOOG", src = "yahoo", auto.assign = FALSE)
hash['GOOG'] <- goog
a['GOOG'] <- getSymbols("GOOG", src = "yahoo", auto.assign = FALSE)
a['GOOH']
a['GOOG']
a['GOOG'][,'GOOG.Adjusted']
typeof(a['GOOG'])
goog <- getSymbols("GOOG", src = "yahoo", auto.assign = FALSE)
a['GOOG'] <- goog
a['GOOG']
goog
a['GOOG2']<-GOOG
a['GOOG3']<-goog
View(a)
a[["GOOG"]]
a <- hash()
a['GOOG'] <- getSymbols("GOOG", src = "yahoo", auto.assign = FALSE)
a[['GOOG']]
get_symbols("GOOG", src = "yahoo")
# app
library(shiny)
library(RQuantLib)
library(bizdays)
library(quantmod)
library(xts)
library(forecast)
library(callr)
library(pkgbuild)
library(hash)
getSymbolLookup()
getSymbolLookup("Google")
getSymbolLookup('GOOG')
getSymbolLookup("QQQQ")
setSymbolLookup(QQQQ='yahoo')
getSymbolLookup('QQQQ')
getSymbolLookup("GOOG")
getSymbols("GOOG")
g <- head(GOOG,5)
cbind(NULL, g)
names(g) <- c("open","high","low","close","volume","adjusted")
g
output$table1 <- renderTable({
output_table1 <- NULL
for (symbol in input$selected_stocks) {
last2 <- tail(data[[symbol]],2)
names(last2) <- c("open","high","low","close","volume","adjusted")
diff_abs <- as.numeric(last2[2,"adjusted"])-as.numeric(last2[1,"adjusted"])
change_abs <- xts(diff_abs+0:0, order.by = as.Date(index(last2[2,]))+0:0)
diff_pct <- diff_abs/as.numeric(last2[1,"adjusted"])
change_pct <- xts(diff_pct+0:0, order.by = as.Date(index(last2[2,]))+0:0)
symbol_column <- xts(c(symbol), order.by = as.Date(index(last2[2,]))+0:0)
new_row <- cbind(symbol_column,last2[2,"adjusted"],change_abs,change_pct)
output_table1 <- rbind(output_table1,new_row)
}
output_table1
})
return(output_table1)
runApp()
runApp()
runApp()
g
cbind(c("GOOG","GOOG","GOOG","GOOG","GOOG"),g)
"GOOG"+0:0
["GOOG"]
list("GOOG")
cbind(list("GOOG","GOOG","GOOG","GOOG","GOOG"),g)
cbind(1:5,g)
typeof(1:5)
typeof(c("GOOG","GOOG","GOOG","GOOG","GOOG"))
cbind(1,g)
cbind("GOOG",g)
cbind(c("GOOG","GOOG","GOOG","GOOG","GOOG"),g, stringAsFactors = FALSE)
g.open
g
g[['open']]
g['open']
g[,'open']
typeof(g[,'open'])
xts(c(1,2), order.by = as.Date(g[5,])+0:0)
xts(c(1,2), order.by = as.Date(index(g[5,]))+0:0)
xts(c(1), order.by = as.Date(index(g[5,]))+0:0)
xts(c("1"), order.by = as.Date(index(g[5,]))+0:0)
xts(c("GOOG"), order.by = as.Date(index(g[5,]))+0:0)
?xts
typeof(xts(c("GOOG"), order.by = as.Date(index(g[5,]))+0:0))
cbind(xts(c("GOOG"), order.by = as.Date(index(g[5,]))+0:0),g[5,])
ch <- xts(c("GOOG"), order.by = as.Date(index(g[5,]))+0:0)
ig <- xts(c(1), order.by = as.Date(index(g[5,]))+0:0)
ig
cbind(ig,g[5,])
cbind(ch,g[5,])
g['goog'] = 'goog'
g
g['hi'] <- c("GOOG",'GOOG','GOOG','GOOG','GOOG')
G
g
g['hi'] <- 1:5
g
g1 <- g[1,]
g1
g1['hi'] <- c(as.Date("2007-01-03","hi"))
g1
cbind(g1,1)
cbind(g1,"1")
cbind(g1,"hi")
data.frame(date=index(g), coredata(g))
a <- data.frame(date=index(g), coredata(g))
a['symbol'] = c("GOOG","GOOG","GOOG","GOOG","GOOG")
A
a
runApp()
runApp()
runApp()
bool(1)
1 == TRUE
NULL == FALSE
NULL == TRUE
if (NULL) {}
if (NULL) {
print('h')
}
if (NULL == TRUE) {
print('hi')
}
if (FALSE) {print("hi")}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
read.csv('/Users/juan/Downloads/Cafe\ Attributes\ -\ Sheet5.csv')
data <- read.csv('/Users/juan/Downloads/Cafe\ Attributes\ -\ Sheet5.csv')
linreg <- lm(c('Price') ~ c('Low','Med','High'))
linreg <- lm(c('Price') ~ c('Low','Med','High'), data=data)
data$Price
data
data <- read.csv('/Users/juan/Downloads/Cafe\ Attributes\ -\ Sheet5.csv')
data
data$Price
linreg <- lm(c('Price') ~ c('Low','Med','High'), data=data)
data$Price
linreg <- lm(data$Price ~ data$Low)
linreg <- lm(data$Price ~ data$Low, data$Med, data$High)
linreg <- lm(data$Price ~ c(data$Low, data$Med, data$High))
linreg <- lm(data$Price ~ data$Low+data$Med+data$High)
View(linreg)
linreg$coefficients
data
linreg$coefficients
summary(linreg)
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
headerPanel("Dynamic number of plots"),
sidebarPanel(
sliderInput("n", "Number of plots", value=1, min=1, max=5)
),
mainPanel(
# This is the dynamic UI for the plots
uiOutput("plots")
)
)
View(ui)
runApp('~/Documents/GitHub/Capstone/Other R files/app_draft.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/Capstone/Other R files/app_draft.R')
runApp('~/Documents/GitHub/Capstone/Other R files/app_draft.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
symbols <- c("AAPL", "GOOG")
symbols[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
symbols <- c("AAPL", "GOOG")
data <- hash()
for (symbol in symbols) {
data[symbol] <- getSymbols(symbol, src = "yahoo", auto.assign = FALSE)
}
data['AAPL']
data['AAPL']['AAPL.Adjusted']
data['AAPL']
data['AAPL']
ui <- fluidPage(
tabsetPanel(
id = 'main-tabs',
tabPanel(
id = 'analysis-tab',
title = 'Análisis',
headerPanel('Análisis de datos'),
sidebarPanel(
"Selección de datos",
dateInput('start_date', 'Fecha inicial', value = "2019-01-01"),
dateInput('end_date', 'Fecha final', value = "2019-12-31"),
checkboxGroupInput('selected_stocks', "Selección de stocks",
symbols),
numericInput('init_capital', 'Capital de inversión inicial ($MXN)', min = 0, value = 100),
"Pronósticos",
selectInput('forecast_alg', 'Suavizamiento exponencial Holt Winters', algorithm_names),
numericInput('h_holt', 'Horizonte de Predicción', min = 1, value = 20)
),
mainPanel(
id = 'inner-main-analysis',
tabsetPanel(
id = 'analysis-inner-tab',
tabPanel(
id = 'data-panel',
title = 'Datos',
tableOutput('table1'),
icon = icon("table")
),
tabPanel(
id = 'visualization-panel',
title = 'Visualización',
uiOutput('plots'),
plotOutput('plot2'),
plotOutput('plot3'),
icon = icon("chart-line")
)
) # <- end tabsetPanel 'analysis-inner-tab'
) # <- end mainPanel 'inner-main-analysis'
) # <-- end tabPanel 'analysis-tab'
) # <-- end tabsetPanel 'main-tabs'
) # <-- end fluid Page
data['AAPL']
data[['AAPL']]
data[['AAPL']]['AAPL.Adjusted']
data[['AAPL']].AAPL.Adjusted
data[['AAPL']]
data[['AAPL']].AAPL.Open
data[['AAPL']]["AAPL.Open"]
data[['AAPL']]
aapl <- getSymbols("AAPL", src = "yahoo", auto.assign = FALSE)
aapl.AAPL.Adjusted
aapl
aapl.AAPL.Adjusted
aapl['AAPL.Adjusted']
aapl[['AAPL.Adjusted']]
aapl[:,'AAPL.Adjusted']
aapl["AAPL.Adjusted"]
columns(aapl)
getSymbols("AAPL", src = "yahoo")
AAPL.AAPL.Adjusted
AAPL$AAPL.Adjusted
data[['AAPL']]$AAPL.Adjusted
data[['AAPL']]$["AAPL.Adjusted"]
data[['AAPL']]$"AAPL.Adjusted"
data[s]$x
s <- "AAPL"
x <- paste(s,"Adjusted",sep = '.')
data[s]$x
x <- paste(s,"Adjusted",sep = '.')
data[s]$x
data[s]
data[[s]]$x
data[[s]]
data[[s]]$x
data[[s]][,x]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
