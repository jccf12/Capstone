data <- read.csv("/Users/juan/Downloads/Loreal_Sales.csv")
data <- read.csv("/Users/juan/Downloads/Loreal_Sales.csv")
type(data)
class(data)
data
data.["Sales ($millions)"]
data["Sales ($millions)"]
data.columns
columns(data)
str(data)
data <- read.csv("/Users/juan/Downloads/Loreal_Sales.csv")
str(data)
class(data.Sales)
data["Sales"]
class(data["Sales"])
data["Sales"] <- as.numeric(data["Sales"])
data["Sales"] <- as.numeric(unlist(data["Sales"]))
data["Sales"]
data["Sales"]
data <- read.csv("/Users/juan/Downloads/Loreal_Sales.csv")
data <- read.csv("/Users/juan/Downloads/Loreal_Sales1.csv")
Lorealtimeseries <-ts(data,frequency=4,start=c(2007,1))
Lorealtimeseries
source('~/Documents/R/holt_winters_loreal.R', echo=TRUE)
#Install the necessary packages:
install.packages("forecast")
install.packages("smooth")
library("forecast")
require(smooth)
#Install the necessary packages:
install.packages("forecast")
#Install the necessary packages:
install.packages("forecast")
install.packages("forecast")
library("forecast", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
require(smooth)
install.packages("smooth")
library("smooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
#Downlaod the data and store it in the right formats:
Loreal_Sales <- read.csv("/Users/Documents/Ry/Loreal_Sales_1.csv")
Loreal_Sales
#Downlaod the data and store it in the right formats:
Loreal_Sales <- read.csv("/Users/juan/Documents/R/Loreal_Sales1.csv")
Loreal_Sales
#Download the data set containing Loreal's quarterly sales (in millions of dollars) from the beginning of 2007 to the end of 2017.
Lorealtimeseries <-ts(Loreal_Sales,frequency=4,start=c(2007,1))
#Store the data in a time series object.
Lorealtimeseries
plot.ts(Lorealtimeseries)
#Plot the time series to get a visualization.
loreal_components <- decompose(Lorealtimeseries) #greatly facilitates observing the seasons and trend
plot(loreal_components)
#Simple Moving Average:
sma(Lorealtimeseries,h = 1, silent=FALSE, holdout = TRUE)
#Exponential Smoothing
es(Lorealtimeseries, model = "ZZZ", h = 1, holdout = TRUE, silent = FALSE)
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries)
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2
#This will reveal the values of the smoothing parameters of the Holt Winters method.
plot(fittedseries2)
#This will reveal the values of the smoothing parameters of the Holt Winters method.
plot(fittedseries2)
#this function plots the original time series against the forecasts
forecast(fittedseries2,4)
plot(forecast(fittedseries2,4))
#This will reveal the values of the smoothing parameters of the Holt Winters method.
plot(fittedseries2)
#Simple Moving Average:
sma(Lorealtimeseries,h = 1, silent=FALSE, holdout = TRUE)
#Exponential Smoothing
es(Lorealtimeseries, model = "ZZZ", h = 1, holdout = TRUE, silent = FALSE)
#Simple Moving Average:
sma(Lorealtimeseries,h = 1, silent=FALSE, holdout = TRUE)
#Exponential Smoothing
es(Lorealtimeseries, model = "ZZZ", h = 1, holdout = TRUE, silent = FALSE)
#Simple Moving Average:
sma(Lorealtimeseries,h = 1, silent=FALSE, holdout = TRUE)
#Simple Moving Average:
sma(Lorealtimeseries,h = 4, silent=FALSE, holdout = TRUE)
#Simple Moving Average:
sma(Lorealtimeseries,h = 10, silent=FALSE, holdout = TRUE)
#Simple Moving Average:
sma(Lorealtimeseries,h = 1, silent=FALSE, holdout = TRUE)
#Simple Moving Average:
sma(Lorealtimeseries,h = 1, silent=FALSE, holdout = FALSE)
#Simple Moving Average:
sma(Lorealtimeseries,h = 4, silent=FALSE, holdout = FALSE)
#Exponential Smoothing
es(Lorealtimeseries, model = "ZZZ", h = 4, holdout = FALSE, silent = FALSE)
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2.SSE
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries)
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2.SSE
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2
#This will reveal the values of the smoothing parameters of the Holt Winters method.
plot(fittedseries2)
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries)
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries)
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2.a
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2["Coefficients"]
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2["SSE"]
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2["fitted"]
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$fitted
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$fitted$xhat
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$fitted["xhat"]
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$fitted
#Fit a predictive model using the Holt Winters forecasting method.
fitted <- fittedseries2$fitted
View(fittedseries2)
View(fitted)
fitted$xhat
fitted
fitted[0]
fitted[0,0]
fitted.values()
fittedseries2
fitted[1]
fitted[1:40]
#Fit a predictive model using the Holt Winters forecasting method.
fitted_values <- fittedseries2$fitted[1:40]
plot(fitted_values)
plot(fitted_values)
plot(fitted_values, type = "l")
2^2
sse <- 0
for (i in 1:40) {
sse <- sse + (fitted_values[i]-Loreal_Sales[i])^2
}
Loreal_Sales
sse <- 0
for (i in 1:40) {
sse <- sse + (fitted_values[i]-Loreal_Sales.Sales[i])^2
}
sse <- sse + (fitted_values[i]-Loreal_Sales$Sales[i])^2
sse
fitted_value$SSE
fittedseries2$SSE
print(fitted_values[i]-Loreal_Sales$Sales[i])
for (i in 1:40) {
print(fitted_values[i]-Loreal_Sales$Sales[i])
sse <- sse + (fitted_values[i]-Loreal_Sales$Sales[i])^2
}
#Simple Moving Average:
sma(Lorealtimeseries,h = 4, silent=FALSE, holdout = FALSE)
help(sma)
#This will reveal the values of the smoothing parameters of the Holt Winters method.
plot(fittedseries2)
#this function plots the original time series against the forecasts
forecast(fittedseries2,4)
plot(forecast(fittedseries2,4))
plot(forecast(fittedseries2,4),fittedseries2)
plot(forecast(fittedseries2,4))+plot(fittedseries2)
plot(forecast(fittedseries2,4))+plot(fittedseries2)
plot(forecast(fittedseries2,4))+plot(fittedseries2)
p1 <- plot(fitted_values, type = "l")
#This will reveal the values of the smoothing parameters of the Holt Winters method.
p1 <- plot(fittedseries2)
p2 <- plot(forecast(fittedseries2,4))
p1+p2
p1+p0
#This will reveal the values of the smoothing parameters of the Holt Winters method.
plot(fittedseries2)
lines(fitted_values, type = "l")
plot(forecast(fittedseries2,4))
lines(fittedseries2)
#This will reveal the values of the smoothing parameters of the Holt Winters method.
plot(fittedseries2)
#This will reveal the values of the smoothing parameters of the Holt Winters method.
plot(fittedseries2)
plot(forecast(fittedseries2,4),add=TRUE)
help(forecast)
plot(forecast(fittedseries2,4))
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries)
#this function plots the original time series against the forecasts
forecast(fittedseries2,4)
plot(forecast(fittedseries2,4))
#this function plots the original time series against the forecasts
forecast(fittedseries2,4)
#this function plots the original time series against the forecasts
forecast(fittedseries2,4)
#Simple Moving Average:
sma(Lorealtimeseries,h = 4, silent=FALSE, holdout = FALSE)
#Simple Moving Average:
sma(Lorealtimeseries,h = 1, silent=FALSE, holdout = FALSE)
#Simple Moving Average:
sma(Lorealtimeseries,h = 4, silent=FALSE, holdout = FALSE)
help(sma)
#Simple Moving Average:
sma1 <- sma(Lorealtimeseries,h = 4, silent=FALSE, holdout = FALSE)
sma1$errors
#Exponential Smoothing
es(Lorealtimeseries, model = "ZZZ", h = 4, holdout = FALSE, silent = FALSE)
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries)
fittedseries2$SSE
help(HoltWinters)
mape <- 0
for (i in 1:40) {
mape <- mape + abs((fitted_values[i]-Loreal_Sales$Sales[i])/(Loreal_Sales$Sales[i]))
}
mape
mape/40
sse
sse <- 0
for (i in 1:40) {
sse <- sse + (fitted_values[i]-Loreal_Sales$Sales[i])^2
}
sse
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries)
fittedseries2$SSE
fittedseries2$SSE/40
#Exponential Smoothing
es(Lorealtimeseries, model = "ZZZ", h = 4, holdout = FALSE, silent = FALSE)
#Exponential Smoothing
es(Lorealtimeseries, model = "ZZZ", h = 4, holdout = TRUE, silent = FALSE)
#Simple Moving Average:
sma1 <- sma(Lorealtimeseries,h = 8, silent=FALSE, holdout = TRUE)
#Exponential Smoothing
es(Lorealtimeseries, model = "ZZZ", h = 8, holdout = TRUE, silent = FALSE)
help(HoltWinters)
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries[1:32])
#This will reveal the values of the smoothing parameters of the Holt Winters method.
plot(fittedseries2)
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries[1:32])
#This will reveal the values of the smoothing parameters of the Holt Winters method.
plot(fittedseries2)
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries[1:32])
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries)
help(HoltWinters)
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries, alpha=0.5)
#This will reveal the values of the smoothing parameters of the Holt Winters method.
plot(fittedseries2)
fittedseries2
fittedseries2$SSE
fittedseries2$fitted
sse
sse <- 0
for (i in 1:40) {
sse <- sse + (fitted_values[i]-Loreal_Sales$Sales[i])^2
}
sse
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
sse
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
sse/40
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
sse <- 0
for (i in 1:40) {
sse <- sse + (fitted_values[i]-Loreal_Sales$Sales[i])^2
}
sse/40
sse/40
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
help(HoltWinters)
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries, seasonal = "additive")
fittedseries2
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries, seasonal = "multiplicative")
fittedseries2
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries, seasonal = "multiplicative")
fittedseries2
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries, seasonal = "multiplicative")
fittedseries2
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries, seasonal = "additive")
fittedseries2
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
sse <- 0
plot.ts(Lorealtimeseries)
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries, seasonal = "additive")
fittedseries2
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries, seasonal = "multiplicative")
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries)
fittedseries2
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries)
fittedseries2
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries, "multiplicative")
fittedseries2
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries, "multiplicative")
fittedseries2
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
sse <- 0
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries, "additive")
fittedseries2
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries, seasonal = "multiplicative")
fittedseries2
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries, seasonal = "multiplicative", gamma = TRUE)
fittedseries2
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries, seasonal = "multiplicative", gamma = TRUE)
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2$SSE/40
#This will reveal the values of the smoothing parameters of the Holt Winters method.
plot(fittedseries2)
#this function plots the original time series against the forecasts
forecast(fittedseries2,4)
plot(forecast(fittedseries2,4))
help("decompose")
#Plot the time series to get a visualization.
loreal_components <- decompose(Lorealtimeseries, type = "additive") #greatly facilitates observing the seasons and trend
plot(loreal_components)
#Plot the time series to get a visualization.
loreal_components <- decompose(Lorealtimeseries, type = "multiplicative") #greatly facilitates observing the seasons and trend
plot(loreal_components)
#Simple Moving Average:
sma(Lorealtimeseries,h = 1, silent=FALSE, holdout = TRUE)
library("forecast")
require(smooth)
#Downlaod the data and store it in the right formats:
Loreal_Sales <- read.csv("/Users/Documents/R/Loreal_Sales_1.csv")
Loreal_Sales
#Download the data set containing Loreal's quarterly sales (in millions of dollars) from the beginning of 2007 to the end of 2017.
Lorealtimeseries <-ts(Loreal_Sales,frequency=4,start=c(2007,1))
#Store the data in a time series object.
Lorealtimeseries
plot.ts(Lorealtimeseries)
#Plot the time series to get a visualization.
loreal_components <- decompose(Lorealtimeseries) #greatly facilitates observing the seasons and trend
plot(loreal_components)
#Simple Moving Average:
sma(Lorealtimeseries,h = 1, silent=FALSE, holdout = TRUE)
#Install the necessary packages:
install.packages("forecast")
install.packages("forecast")
library("forecast")
require(smooth)
#Downlaod the data and store it in the right formats:
Loreal_Sales <- read.csv("/Users/Documents/R/Loreal_Sales_1.csv")
#Downlaod the data and store it in the right formats:
Loreal_Sales <- read.csv("/Users/juan/Documents/R/Loreal_Sales_1.csv")
#Downlaod the data and store it in the right formats:
Loreal_Sales <- read.csv("/Users/juan/Documents/R/Loreal_Sales1.csv")
Loreal_Sales
#Download the data set containing Loreal's quarterly sales (in millions of dollars) from the beginning of 2007 to the end of 2017.
Lorealtimeseries <-ts(Loreal_Sales,frequency=4,start=c(2007,1))
#Store the data in a time series object.
Lorealtimeseries
plot.ts(Lorealtimeseries)
#Plot the time series to get a visualization.
loreal_components <- decompose(Lorealtimeseries) #greatly facilitates observing the seasons and trend
plot(loreal_components)
#Simple Moving Average:
sma(Lorealtimeseries,h = 1, silent=FALSE, holdout = TRUE)
#Simple Moving Average:
sma(Lorealtimeseries,h = 4, silent=FALSE, holdout = TRUE)
#Simple Moving Average:
sma(Lorealtimeseries,h = 4, silent=FALSE, holdout = TRUE)
#Simple Moving Average:
sma(Lorealtimeseries,h = 4, silent=FALSE, holdout = FALSE)
#Simple Moving Average:
sma(Lorealtimeseries,h = 4, silent=FALSE, holdout = TRUE)
sma$sMSE
sma$error
sma$errors
load("~/Documents/GitHub/shiny.rstudio.com-tutorial/part-1-code/app.R")
shiny::runApp('Documents/GitHub/shiny.rstudio.com-tutorial/part-1-code')
library("forecast")
require(smooth)
#Downlaod the data and store it in the right formats:
Loreal_Sales <- read.csv("/Users/juan/Documents/R/Loreal_Sales1.csv")
Loreal_Sales
#Download the data set containing Loreal's quarterly sales (in millions of dollars) from the beginning of 2007 to the end of 2017.
Lorealtimeseries <-ts(Loreal_Sales,frequency=4,start=c(2007,1))
#Store the data in a time series object.
Lorealtimeseries
plot.ts(Lorealtimeseries)
#Plot the time series to get a visualization.
loreal_components <- decompose(Lorealtimeseries) #greatly facilitates observing the seasons and trend
plot(loreal_components)
#Simple Moving Average:
sma(Lorealtimeseries,h = 4, silent=FALSE, holdout = TRUE)
#Exponential Smoothing
es(Lorealtimeseries, model = "ZZZ", h = 1, holdout = TRUE, silent = FALSE)
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries)
#Fit a predictive model using the Holt Winters forecasting method.
fittedseries2
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries)
#The Holt Winters Forecasting Method:
fittedseries2 <- HoltWinters(Lorealtimeseries)
#This will reveal the values of the smoothing parameters of the Holt Winters method.
plot(fittedseries2)
#Simple Moving Average:
sma(Lorealtimeseries,h = 4, silent=FALSE, holdout = TRUE)
#Simple Moving Average:
sma(Lorealtimeseries,h = 4, silent=FALSE, holdout = FALSE)
#Simple Moving Average:
sma(Lorealtimeseries,h = 4, silent=FALSE, holdout = TRUE)
#Simple Moving Average:
sma(Lorealtimeseries,h = 4, silent=FALSE, holdout = FALSE)
#Plot the time series to get a visualization.
loreal_components <- decompose(Lorealtimeseries) #greatly facilitates observing the seasons and trend
plot(loreal_components)
?sma
??sma
shiny::runApp('Documents/GitHub/shiny.rstudio.com-tutorial/part-1-code')
names(iris)
shiny::runApp('Documents/GitHub/shiny.rstudio.com-tutorial/part-1-code')
library(shiny); runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
runApp('~/Documents/GitHub/shiny.rstudio.com-tutorial/part-1-code/01-template.R')
runApp('Documents/GitHub/Capstone/R/first_shiny_app.R')
