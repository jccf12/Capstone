colnames(real_df) <- "Price"
real_df$ds <- rownames(real_df)
rownames(real_df) <- NULL
real_df$ds <- as.Date(real_df$ds)
forecast_prophet$ds <- as.Date(forecast_prophet$ds)
joint_prophet_df = left_join(real_df, forecast_prophet, by="ds")
rownames(joint_prophet_df) <- joint_prophet_df$ds
joint_prophet_df$PriceX <- joint_prophet_df$Price
joint_prophet_df$Price[joint_prophet_df$ds > input$end_date] = NA
joint_prophet_df$PriceX[joint_prophet_df$ds < input$end_date+1] = NA
multiplier <- input$init_capital*input[[paste("slider",counter,sep="")]]/(100*joint_prophet_df$Price[1])
main_df[[paste("PriceProphet",symbol,sep="")]] <- joint_prophet_df$Price*multiplier
prophet_df <- data[[symbol]][seq(input$start_date, input$end_date, "days")]
prophet_df <- data.frame(prophet_df[,6])
setDT(prophet_df, keep.rownames = TRUE)
colnames(prophet_df) <- c("ds", "y")
m_prophet <- prophet(prophet_df, yearly.seasonality = input$seasonal, weekly.seasonality = FALSE)
future_prophet <- make_future_dataframe(m_prophet, periods = input$h_inv)
if (!main_df) {
main_df <- make_future_dataframe(m_prophet, periods = input$h_inv)
}
forecast_prophet <- predict(m_prophet, future_prophet)
holt_df <- data[[symbol]][seq(input$start_date, input$end_date, "days")]
#prophet_df <- getSymbols(my_symbol, src = "yahoo", from = input$date, to = input$end_date, auto.assign = FALSE)
holt_df <- data.frame(holt_df[,6])
setDT(holt_df, keep.rownames = TRUE)
colnames(holt_df) <- c("ds", "y")
holt_ts <- ts(holt_df$y, frequency = as.integer(nrow(holt_df)/3))
for_actual_values<-data[[symbol]][seq(input$end_date, input$end_date+input$h_inv, "days")]
hw <-HoltWinters(holt_ts)
forecast<-predict(hw, n.ahead = dim(for_actual_values)[1],  prediction.interval=T,  level=.95)
for_values<-data.frame(time=round(time(forecast),  3),value_forecast=as.data.frame(forecast)$fit,  dev=as.data.frame(forecast)$upr-as.data.frame(forecast)$fit)
fitted_values<-data.frame(time=round(time(hw$fitted),  3),  value_fitted=as.data.frame(hw$fitted)$xhat)
actual_values<-data.frame(time=round(time(hw$x),  3),  Actual=c(hw$x))
for_actual_values<-data.frame(time=round(time(forecast), 3),value_actual=as.data.frame(for_actual_values)[,6])
graphset<-merge(actual_values,  fitted_values,  by='time',  all=TRUE)
graphset<-merge(graphset,  for_values,  all=TRUE,  by='time')
graphset<-merge(graphset,  for_actual_values,  all=TRUE,  by='time')
graphset[is.na(graphset$dev),  ]$dev<-0
graphset$Fitted<-c(rep(NA,  NROW(graphset)-(NROW(for_values) + NROW(fitted_values))),  fitted_values$value_fitted,  for_values$value_forecast)
actual2_size <- NROW(graphset)-NROW(for_actual_values)
graphset$Actual2<-c(graphset$Actual[1:actual2_size],  for_actual_values$value_actual)
graphset.melt<-melt(graphset[, c('time', 'Actual2', 'Fitted')], id='time')
real_df <- data[[symbol]][seq(input$start_date, input$end_date+input$h_inv, "days")]
#real_df <- getSymbols(my_symbol, src = "yahoo", from = input$date, to = "2017-06-23", auto.assign = FALSE)
real_df <- data.frame(real_df[,6])
colnames(real_df) <- "Price"
real_df$ds <- rownames(real_df)
rownames(real_df) <- NULL
real_df$ds <- as.Date(real_df$ds)
forecast_prophet$ds <- as.Date(forecast_prophet$ds)
joint_prophet_df = left_join(real_df, forecast_prophet, by="ds")
rownames(joint_prophet_df) <- joint_prophet_df$ds
joint_prophet_df$PriceX <- joint_prophet_df$Price
joint_prophet_df$Price[joint_prophet_df$ds > input$end_date] = NA
joint_prophet_df$PriceX[joint_prophet_df$ds < input$end_date+1] = NA
multiplier <- input$init_capital*input[[paste("slider",counter,sep="")]]/(100*joint_prophet_df$Price[1])
#graphset$Actual2 <- graphset$Actual2*multiplier
#graphset$Fitted <- graphset$Fitted*multiplier
#graphset$dev <- graphset$dev*multiplier
#graphset.melt$value <- graphset.melt$value*multiplier
main_df
#graphset$Actual2 <- graphset$Actual2*multiplier
#graphset$Fitted <- graphset$Fitted*multiplier
#graphset$dev <- graphset$dev*multiplier
#graphset.melt$value <- graphset.melt$value*multiplier
joint_prophet_df$Price
#graphset$Actual2 <- graphset$Actual2*multiplier
#graphset$Fitted <- graphset$Fitted*multiplier
#graphset$dev <- graphset$dev*multiplier
#graphset.melt$value <- graphset.melt$value*multiplier
joint_prophet_df
#graphset$Actual2 <- graphset$Actual2*multiplier
#graphset$Fitted <- graphset$Fitted*multiplier
#graphset$dev <- graphset$dev*multiplier
#graphset.melt$value <- graphset.melt$value*multiplier
tail(main_df,1)
tail(joint_prophet_df,1)
head(joint_prophet_df,1)
#graphset$Actual2 <- graphset$Actual2*multiplier
#graphset$Fitted <- graphset$Fitted*multiplier
#graphset$dev <- graphset$dev*multiplier
#graphset.melt$value <- graphset.melt$value*multiplier
head(main_df,1)
#graphset$Actual2 <- graphset$Actual2*multiplier
#graphset$Fitted <- graphset$Fitted*multiplier
#graphset$dev <- graphset$dev*multiplier
#graphset.melt$value <- graphset.melt$value*multiplier
dim(main_df)
dim(joint_prophet_df)
joint_prophet_df
tail(joint_prophet_df)
tail(main_df,1)
tail(main_df)
joint_prophet_df$ds
main_df <- data.frame(ds = joint_prophet_df$ds)
main_df[[paste("PriceProphet",symbol,sep="")]] <- joint_prophet_df$Price*multiplier
main_df[[paste("PriceXProphet",symbol,sep="")]] <- joint_prophet_df$PriceX*multiplier
main_df[[paste("yhatProphet",symbol,sep="")]] <- joint_prophet_df$yhat*multiplier
main_df[[paste("yhat_lowerProphet",symbol,sep="")]] <- joint_prophet_df$yhat_lower*multiplier
main_df[[paste("yhat_upperProphet",symbol,sep="")]] <- joint_prophet_df$yhat_upper*multiplier
main_df[[paste("Actual",symbol,sep= "")]] <- graphset.melt$value*multiplier
main_df[[paste("FittedHolt",symbol, sep = "")]] <- graphset$Fitted*multiplier
main_df[[paste("DevHolt", symbol, sep = "")]] <- graphset$dev*multiplier
graphset
if (!holt_df) {
holt_df <- data.frame(time = graphset$time)
}
prophet_df <- FALSE
holt_df <- FALSE
#graphset$Actual2 <- graphset$Actual2*multiplier
#graphset$Fitted <- graphset$Fitted*multiplier
#graphset$dev <- graphset$dev*multiplier
#graphset.melt$value <- graphset.melt$value*multiplier
if (!prophet_df) {
prophet_df <- data.frame(ds = joint_prophet_df$ds)
}
if (!holt_df) {
holt_df <- data.frame(time = graphset$time)
}
prophet_df[[paste("PriceProphet",symbol,sep="")]] <- joint_prophet_df$Price*multiplier
prophet_df[[paste("PriceXProphet",symbol,sep="")]] <- joint_prophet_df$PriceX*multiplier
prophet_df[[paste("yhatProphet",symbol,sep="")]] <- joint_prophet_df$yhat*multiplier
prophet_df[[paste("yhat_lowerProphet",symbol,sep="")]] <- joint_prophet_df$yhat_lower*multiplier
prophet_df[[paste("yhat_upperProphet",symbol,sep="")]] <- joint_prophet_df$yhat_upper*multiplier
holt_df[[paste("Actual",symbol,sep= "")]] <- graphset.melt$value*multiplier
holt_df[[paste("FittedHolt",symbol, sep = "")]] <- graphset$Fitted*multiplier
holt_df
holt_df[[paste("Actual",symbol,sep= "")]] <- graphset$Actual2*multiplier
holt_df[[paste("FittedHolt",symbol, sep = "")]] <- graphset$Fitted*multiplier
holt_df[[paste("DevHolt", symbol, sep = "")]] <- graphset$dev*multiplier
holt_df
ggp1 <- ggplot(prophet_df, aes(x=ds)) + geom_vline(aes(xintercept=as.numeric(as.Date(input$end_date+1))), cex=0.8, col="steelblue4")+
ggtitle("Prophet's Time Series Forecasting")+ theme(plot.title = element_text(size = 15))
ggp2 <- ggplot(holt_df,  aes(x=time)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp1 <- ggp1 + geom_point(aes(y=paste("PriceProphet",symbol,sep="")), size=1) + geom_point(aes(y=paste("PriceXProphet",symbol,sep="")), col="forestgreen", size=1) +
geom_line(aes(y=paste("yhatProphet",symbol,sep=""))) + geom_ribbon(aes(ymin=paste("yhat_lowerProphet",symbol,sep=""), ymax=paste("yhat_upperProphet",symbol,sep="")), fill="deepskyblue", alpha=0.5)
ggp2 <- ggp2 + geom_ribbon(data=graphset, aes(x=time, y=Fitted, ymin=Fitted-dev,  ymax=Fitted + dev),  alpha=.2,  fill='green')
return(grid.arrange(ggp1,ggp2, ncol=2, top = textGrob("Portfolio Forecasted",gp=gpar(fontsize=20,font=2)) ))
grid.arrange(ggp1,ggp2, ncol=2, top = textGrob("Portfolio Forecasted",gp=gpar(fontsize=20,font=2)) )
ggp1
ggp1 <- ggplot(prophet_df, aes(x=ds)) + geom_vline(aes(xintercept=as.numeric(as.Date(input$end_date+1))), cex=0.8, col="steelblue4")+
ggtitle("Prophet's Time Series Forecasting")+ theme(plot.title = element_text(size = 15))
ggp1
ggp1 + geom_point(aes(y=paste("PriceProphet",symbol,sep="")), size=1) + geom_point(aes(y=paste("PriceXProphet",symbol,sep="")), col="forestgreen", size=1) +
geom_line(aes(y=paste("yhatProphet",symbol,sep=""))) + geom_ribbon(aes(ymin=paste("yhat_lowerProphet",symbol,sep=""), ymax=paste("yhat_upperProphet",symbol,sep="")), fill="deepskyblue", alpha=0.5)
ggp1 <- ggplot(prophet_df, aes(x=ds)) + geom_vline(aes(xintercept=as.numeric(as.Date(input$end_date+1))), cex=0.8, col="steelblue4")+
ggtitle("Prophet's Time Series Forecasting")+ theme(plot.title = element_text(size = 15))
ggp1 + geom_point(aes(y=paste("PriceProphet",symbol,sep=""))
g
ggp1 + geom_point(aes(y=paste("PriceProphet",symbol,sep="")), size=1)
ggplot(prophet_df, aes(x=ds)) + geom_point(aes(y=paste("PriceProphet",symbol,sep="")), size=1)
symbol
prophet_df
ggplot(prophet_df, aes(x=ds)) + geom_vline(aes(xintercept=as.numeric(as.Date(input$end_date+1))), cex=0.8, col="steelblue4")+
ggtitle("Prophet's Time Series Forecasting")+ theme(plot.title = element_text(size = 15))+ geom_point(aes(y=paste("PriceProphet",symbol,sep="")), size=1) + geom_point(aes(y=paste("PriceXProphet",symbol,sep="")), col="forestgreen", size=1) +
geom_line(aes(y=paste("yhatProphet",symbol,sep=""))) + geom_ribbon(aes(ymin=paste("yhat_lowerProphet",symbol,sep=""), ymax=paste("yhat_upperProphet",symbol,sep="")), fill="deepskyblue", alpha=0.5)
ggplot(prophet_df, aes(x=ds)) +geom_point(aes(y=PriceProphet), size=1)
ggplot(prophet_df, aes(x=ds)) +geom_point(aes(y=PriceProphetGOOG), size=1)
head(prophet_df,1)
ggplot(prophet_df, aes(x=ds)) +geom_point(aes(y=PriceProphetGOOGL), size=1)
ggplot(prophet_df, aes(x=ds)) +geom_point(aes(y="PriceProphetGOOGL"), size=1)
ggplot(prophet_df, aes(x=ds)) +geom_point(aes(y=prophet_df[["PriceProphetGOOGL"]]), size=1)
prophet_df[[paste("Price",symbol,sep="")]] <- joint_prophet_df$Price*multiplier
prophet_df[[paste("PriceX",symbol,sep="")]] <- joint_prophet_df$PriceX*multiplier
prophet_df[[paste("yhat",symbol,sep="")]] <- joint_prophet_df$yhat*multiplier
prophet_df[[paste("yhat_lower",symbol,sep="")]] <- joint_prophet_df$yhat_lower*multiplier
prophet_df[[paste("yhat_upper",symbol,sep="")]] <- joint_prophet_df$yhat_upper*multiplier
holt_df[[paste("Actual",symbol,sep= "")]] <- graphset$Actual2*multiplier
holt_df[[paste("Fitted",symbol, sep = "")]] <- graphset$Fitted*multiplier
holt_df[[paste("dev", symbol, sep = "")]] <- graphset$dev*multiplier
ggp1 <- ggplot(prophet_df, aes(x=ds)) + geom_vline(aes(xintercept=as.numeric(as.Date(input$end_date+1))), cex=0.8, col="steelblue4")+
ggtitle("Prophet's Time Series Forecasting")+ theme(plot.title = element_text(size = 15))
ggp1 <- ggp1 + geom_point(aes(y=prophet_df[[paste("Price",symbol,sep="")]]), size=1) + geom_point(aes(y=prophet_df[[paste("PriceX",symbol,sep="")]]), col="forestgreen", size=1) +
geom_line(aes(y=prophet_df[[paste("yhat",symbol,sep="")]])) + geom_ribbon(aes(ymin=prophet_df[[paste("yhat_lower",symbol,sep="")]], ymax=prophet_df[[paste("yhat_upper",symbol,sep="")]]), fill="deepskyblue", alpha=0.5)
ggp1
ggp1 <- ggplot(prophet_df, aes(x=ds)) + geom_vline(aes(xintercept=as.numeric(as.Date(input$end_date+1))), cex=0.8, col="steelblue4")+
ggtitle("Prophet's Time Series Forecasting")+ theme(plot.title = element_text(size = 15))
ggp1 <- ggp1 + geom_point(aes(y=.data[[paste("Price",symbol,sep="")]]), size=1) + geom_point(aes(y=.data[[paste("PriceX",symbol,sep="")]]), col="forestgreen", size=1) +
geom_line(aes(y=.data[[paste("yhat",symbol,sep="")]])) + geom_ribbon(aes(ymin=.data[[paste("yhat_lower",symbol,sep="")]], ymax=.data[[paste("yhat_upper",symbol,sep="")]]), fill="deepskyblue", alpha=0.5)
ggp1
ggplot(prophet_df, aes(x=ds))+ geom_point(aes(y=.data[[paste("Price",symbol,sep="")]]), size=1)
ggp1 <- ggplot(prophet_df, aes(x=ds)) + geom_point(aes(y=.data[[paste("Price",symbol,sep="")]])
} # end 2nd if statement
}# <- end 1st if statment
})
ggp1 <- ggplot(prophet_df, aes(x=ds))
ggp1 <- ggp1 + geom_point(aes(y=.data[[paste("Price",symbol,sep="")]]), size=1)
ggp1
ggp1 <- ggplot(prophet_df, aes(x=ds)) + geom_vline(aes(xintercept=as.numeric(as.Date(input$end_date+1))), cex=0.8, col="steelblue4")+
ggtitle("Prophet's Time Series Forecasting")+ theme(plot.title = element_text(size = 15))
ggp1 <- ggp1 + geom_point(aes(y=.data[[paste("Price",symbol,sep="")]]), size=1) + geom_point(aes(y=.data[[paste("PriceX",symbol,sep="")]]), col="forestgreen", size=1) +
geom_line(aes(y=.data[[paste("yhat",symbol,sep="")]]))
ggp1
ggp1 <- ggplot(prophet_df, aes(x=ds)) + geom_vline(aes(xintercept=as.numeric(as.Date(input$end_date+1))), cex=0.8, col="steelblue4")+
ggtitle("Prophet's Time Series Forecasting")+ theme(plot.title = element_text(size = 15))
ggp1 + geom_point(aes(y=.data[[paste("Price",symbol,sep="")]]), size=1)
input$end_date
as.Date(input$end_date+1)
ggp1 <- ggplot(prophet_df, aes(x=ds)) + geom_vline(aes(xintercept=as.numeric(as.Date(input$end_date+1))), cex=0.8, col="steelblue4")+
ggtitle("Prophet's Time Series Forecasting")+ theme(plot.title = element_text(size = 15))
ggp1
ggp1 <- ggplot(prophet_df, aes(x=ds)) +
ggtitle("Prophet's Time Series Forecasting")+ theme(plot.title = element_text(size = 15))
ggp1 <- ggp1 + geom_point(aes(y=.data[[paste("Price",symbol,sep="")]]), size=1) + geom_point(aes(y=.data[[paste("PriceX",symbol,sep="")]]), col="forestgreen", size=1) +
geom_line(aes(y=.data[[paste("yhat",symbol,sep="")]])) + geom_ribbon(aes(ymin=.data[[paste("yhat_lower",symbol,sep="")]], ymax=.data[[paste("yhat_upper",symbol,sep="")]]), fill="deepskyblue", alpha=0.5)
ggp1
ggp1 <- ggplot(prophet_df, aes(x=ds)) + geom_vline(aes(xintercept=as.Date(input$end_date+1)), cex=0.8, col="steelblue4")+
ggtitle("Prophet's Time Series Forecasting")+ theme(plot.title = element_text(size = 15))
ggp1 <- ggp1 + geom_point(aes(y=.data[[paste("Price",symbol,sep="")]]), size=1) + geom_point(aes(y=.data[[paste("PriceX",symbol,sep="")]]), col="forestgreen", size=1) +
geom_line(aes(y=.data[[paste("yhat",symbol,sep="")]])) + geom_ribbon(aes(ymin=.data[[paste("yhat_lower",symbol,sep="")]], ymax=.data[[paste("yhat_upper",symbol,sep="")]]), fill="deepskyblue", alpha=0.5)
ggp1
ggp2 <- ggplot(holt_df,  aes(x=time)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp2 <- ggp2 + geom_ribbon(data=graphset, aes(x=.data[[paste("Actual"),symbol,sep=""]], y=.data[paste("Fitted", symbol, sep="")], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[paste("Fitted",symbol,sep="")] + .data[paste("dev",symbol,sep="")]),  alpha=.2,  fill='green')
ggp2
ggp2 <- ggplot(holt_df,  aes(x=time)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp2 <- ggp2 + geom_ribbon(data=graphset, aes(x=.data[[paste("Actual"),symbol,sep=""]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[paste("Fitted",symbol,sep="")] + .data[paste("dev",symbol,sep="")]),  alpha=.2,  fill='green')
ggp2
holt_df[[paste("Actual",symbol,sep= "")]] <- graphset$Actual2*multiplier
holt_df[[paste("Fitted",symbol, sep = "")]] <- graphset$Fitted*multiplier
holt_df[[paste("dev", symbol, sep = "")]] <- graphset$dev*multiplier
head(holt_df,1)
holt_df <- FALSE
if (!holt_df) {
holt_df <- data.frame(time = graphset$time)
}
holt_df[[paste("Actual",symbol,sep= "")]] <- graphset$Actual2*multiplier
holt_df[[paste("Fitted",symbol, sep = "")]] <- graphset$Fitted*multiplier
holt_df[[paste("dev", symbol, sep = "")]] <- graphset$dev*multiplier
head(holt_df,1)
ggp2 <- ggplot(holt_df,  aes(x=time)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp2 <- ggp2 + geom_ribbon(data=graphset, aes(x=.data[[paste("Actual"),symbol,sep=""]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[paste("Fitted",symbol,sep="")] + .data[paste("dev",symbol,sep="")]),  alpha=.2,  fill='green')
ggp2
ggp2 <- ggp2 + geom_ribbon(data=holt_df, aes(x=.data[[paste("Actual"),symbol,sep=""]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[paste("Fitted",symbol,sep="")] + .data[paste("dev",symbol,sep="")]),  alpha=.2,  fill='green')
ggp2 <- ggplot(holt_df,  aes(x=time)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp2 <- ggp2 + geom_ribbon(data=holt_df, aes(x=.data[[paste("Actual"),symbol,sep=""]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[paste("Fitted",symbol,sep="")] + .data[paste("dev",symbol,sep="")]),  alpha=.2,  fill='green')
ggp2
ggp2 <- ggp2 + geom_ribbon(aes(x=.data[[paste("Actual"),symbol,sep=""]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[paste("Fitted",symbol,sep="")] + .data[paste("dev",symbol,sep="")]),  alpha=.2,  fill='green')
holt_df
head(holt_df,1)
ggp2 <- ggplot(holt_df,  aes(x=time)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp2
ggp2 <- ggp2 + geom_ribbon(aes(x=.data[[paste("Actual",symbol,sep="")]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[paste("Fitted",symbol,sep="")] + .data[paste("dev",symbol,sep="")]),  alpha=.2,  fill='green')
ggp2
ggp2 <- ggplot(holt_df,  aes(x=time)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp2 <- ggp2 + geom_ribbon(aes(x=.data[[paste("Actual",symbol,sep="")]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[[paste("Fitted",symbol,sep="")]] + .data[[paste("dev",symbol,sep="")]]),  alpha=.2,  fill='green')
ggp2
ggp2 <- ggp2 + geom_ribbon(aes(x=.data[[paste("Actual",symbol,sep="")]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[[paste("Fitted",symbol,sep="")]] + .data[[paste("dev",symbol,sep="")]]),  alpha=.5,  fill='green')
graphset
graphset.melt
holt_df.melt <- graphset.melt
holt_df.melt
if (!holt_df.meltt) {
holt_df <- data.frame(value = graphset.melt$value)
}
holt_df.melt <- FALSE
if (!holt_df.melt) {
holt_df <- data.frame(value = graphset.melt$value)
}
graphset.melt
holt_df.melt <- FALSE
if (!holt_df.melt) {
holt_df <- data.frame(time = graphset.melt$time)
}
graphset.melt
ggp2 <- ggplot(holt_df.melt,  aes(x=time)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
if (!holt_df.melt) {
holt_df <- data.frame(time = graphset.melt$time)
}
holt_df.melt
holt_df.melt <- data.frame(time = graphset.melt$time)
holt_df.melt <- FALSE
holt_df <- FALSE
if (!holt_df) {
holt_df <- data.frame(time = graphset$time)
}
if (!holt_df.melt) {
holt_df.melt <- data.frame(time = graphset.melt$time)
}
holt_df[[paste("Actual",symbol,sep= "")]] <- graphset$Actual2*multiplier
holt_df[[paste("Fitted",symbol, sep = "")]] <- graphset$Fitted*multiplier
holt_df[[paste("dev", symbol, sep = "")]] <- graphset$dev*multiplier
holt_df.melt[[paste("value",symbol, sep="")]] <- graphset.melt$value*multiplier
ggp2 <- ggplot(holt_df.melt,  aes(x=time)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp2 <- ggp2 + geom_line(aes(y=.data[[paste("value",symbol,sep="")]])) + geom_ribbon(data = holt_df, aes(x=.data[[paste("Actual",symbol,sep="")]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[[paste("Fitted",symbol,sep="")]] + .data[[paste("dev",symbol,sep="")]]),  alpha=.5,  fill='green')
ggp2
graphset.melt
real_df <- data[[symbol]][seq(input$start_date, input$end_date+input$h_inv, "days")]
ggplot(graphset.melt,  aes(x=time,  y=value)) + geom_ribbon(data=graphset, aes(x=time, y=Fitted, ymin=Fitted-dev,  ymax=Fitted + dev),  alpha=.2,  fill='green') +
geom_line(aes(colour=variable), size=1) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggplot(graphset.melt, aes(x=time))+geom_line(aes(y=value))
ggplot(graphset.melt,  aes(x=time,  y=value))
ggplot(graphset.melt,  aes(x=time,  y=value)) + geom_ribbon(data=graphset, aes(x=time, y=Fitted, ymin=Fitted-dev,  ymax=Fitted + dev),  alpha=.2,  fill='green')
ggplot(graphset.melt,  aes(x=time,  y=value)) + geom_ribbon(data=graphset, aes(x=time, y=Fitted, ymin=Fitted-dev,  ymax=Fitted + dev),  alpha=.2,  fill='green')+geom_line(aes(colour=variable), size=1)
graphset.melt
graphset
holt_df.melt <- FALSE
holt_df <- FALSE
if (!holt_df) {
holt_df <- data.frame(time = graphset$time)
}
if (!holt_df.melt) {
holt_df.melt <- data.frame(time = graphset.melt$time,
value = graphset.melt$value)
}
holt_df[[paste("Actual",symbol,sep= "")]] <- graphset$Actual2*multiplier
holt_df[[paste("Fitted",symbol, sep = "")]] <- graphset$Fitted*multiplier
holt_df[[paste("dev", symbol, sep = "")]] <- graphset$dev*multiplier
holt_df.melt[[paste("value",symbol, sep="")]] <- graphset.melt$value*multiplier
ggp2 <- ggplot(holt_df.melt,  aes(x=time, y=value)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp2 <- ggplot(holt_df.melt,  aes(x=time, y=value)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
geom_line(aes(colour=variable), size=1) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
ggp2 <- ggplot(holt_df.melt,  aes(x=time, y=value)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
for (symbol in positive_stocks) {
ggp1 <- ggp1 + geom_point(aes(y=.data[[paste("Price",symbol,sep="")]]), size=1) + geom_point(aes(y=.data[[paste("PriceX",symbol,sep="")]]), col="forestgreen", size=1) +
geom_line(aes(y=.data[[paste("yhat",symbol,sep="")]])) + geom_ribbon(aes(ymin=.data[[paste("yhat_lower",symbol,sep="")]], ymax=.data[[paste("yhat_upper",symbol,sep="")]]), fill="deepskyblue", alpha=0.5)
ggp2 <- ggp2
+ geom_ribbon(data = holt_df, aes(x=.data[[paste("Actual",symbol,sep="")]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[[paste("Fitted",symbol,sep="")]] + .data[[paste("dev",symbol,sep="")]]),  alpha=.5,  fill='green')
+ geom_line(aes(colour=variable), size=1)
}
ggp2 <- ggplot(holt_df.melt,  aes(x=time, y=value)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp2
ggp2 <- ggp2
+ geom_line(aes(colour=variable), size=1)
ggp2 <- ggp2 +
geom_ribbon(data = holt_df, aes(x=.data[[paste("Actual",symbol,sep="")]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[[paste("Fitted",symbol,sep="")]] + .data[[paste("dev",symbol,sep="")]]),  alpha=.5,  fill='green') +
geom_line(aes(colour=variable), size=1)
ggp2
symbol
symbol <- "GOOGL"
ggp2 <- ggp2 +
geom_ribbon(data = holt_df, aes(x=.data[[paste("Actual",symbol,sep="")]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[[paste("Fitted",symbol,sep="")]] + .data[[paste("dev",symbol,sep="")]]),  alpha=.5,  fill='green') +
geom_line(aes(colour=variable), size=1)
ggp2 <- ggplot(holt_df.melt,  aes(x=time, y=value)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp2 <- ggp2 +
geom_ribbon(data = holt_df, aes(x=.data[[paste("Actual",symbol,sep="")]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[[paste("Fitted",symbol,sep="")]] + .data[[paste("dev",symbol,sep="")]]),  alpha=.5,  fill='green') +
geom_line(aes(colour=variable), size=1)
ggp2
graphset
holt_df
graphset
holt_df.melt <- FALSE
holt_df <- FALSE
if (!holt_df) {
holt_df <- data.frame(time = graphset$time)
}
if (!holt_df.melt) {
holt_df.melt <- data.frame(time = graphset.melt$time,
value = graphset.melt$value,
variable = graphset.melt$variable)
}
holt_df[[paste("Actual",symbol,sep= "")]] <- graphset$Actual2*multiplier
holt_df[[paste("Fitted",symbol, sep = "")]] <- graphset$Fitted*multiplier
holt_df[[paste("dev", symbol, sep = "")]] <- graphset$dev*multiplier
holt_df.melt[[paste("value",symbol, sep="")]] <- graphset.melt$value*multiplier
ggp2 <- ggplot(holt_df.melt,  aes(x=time, y=value)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp2 <- ggp2 +
geom_ribbon(data = holt_df, aes(x=.data[[paste("Actual",symbol,sep="")]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[[paste("Fitted",symbol,sep="")]] + .data[[paste("dev",symbol,sep="")]]),  alpha=.5,  fill='green') +
geom_line(aes(colour=variable), size=1)
ggp2
graphset
holt_df
head(holt_df)
head(graphset)
head(graphset.melt)
head(holt_df.melt)
holt_df.melt <- FALSE
holt_df <- FALSE
if (!holt_df) {
holt_df <- data.frame(time = graphset$time)
}
if (!holt_df.melt) {
holt_df.melt <- data.frame(time = graphset.melt$time,
value = graphset.melt$value*multiplier,
variable = graphset.melt$variable)
}
holt_df[[paste("Actual",symbol,sep= "")]] <- graphset$Actual2*multiplier
holt_df[[paste("Fitted",symbol, sep = "")]] <- graphset$Fitted*multiplier
holt_df[[paste("dev", symbol, sep = "")]] <- graphset$dev*multiplier
holt_df.melt[[paste("value",symbol, sep="")]] <- graphset.melt$value*multiplier
ggp2 <- ggplot(holt_df.melt,  aes(x=time, y=value)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp2 <- ggp2 +
geom_ribbon(data = holt_df, aes(x=.data[[paste("Actual",symbol,sep="")]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[[paste("Fitted",symbol,sep="")]] + .data[[paste("dev",symbol,sep="")]]),  alpha=.5,  fill='green') +
geom_line(aes(colour=variable), size=1)
ggp2
ggp2 <- ggplot(holt_df.melt,  aes(x=time, y=value)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp2
ggplot(graphset.melt,  aes(x=time,  y=value)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp22 <-ggplot(graphset.melt,  aes(x=time,  y=value)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
+                     xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggplot(graphset.melt,  aes(x=time,  y=value)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp22 <- ggplot(graphset.melt,  aes(x=time,  y=value)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +                      xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp22
ggp2
ggp2 <- geom_ribbon(data = holt_df, aes(x=.data[[paste("Actual",symbol,sep="")]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[[paste("Fitted",symbol,sep="")]] + .data[[paste("dev",symbol,sep="")]]),  alpha=.5,  fill='green')
ggp2
ggp2 <- ggplot(holt_df.melt,  aes(x=time, y=value)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp2 <- ggp2 + geom_ribbon(data = holt_df, aes(x=.data[[paste("Actual",symbol,sep="")]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[[paste("Fitted",symbol,sep="")]] + .data[[paste("dev",symbol,sep="")]]),  alpha=.5,  fill='green') +
ggp2
ggp2 <- ggp2 + geom_ribbon(data = holt_df, aes(x=.data[[paste("Actual",symbol,sep="")]], y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[[paste("Fitted",symbol,sep="")]] + .data[[paste("dev",symbol,sep="")]]),  alpha=.5,  fill='green')
ggp2
ggp22 <- ggp22 + geom_ribbon(data=graphset, aes(x=time, y=Fitted, ymin=Fitted-dev,  ymax=Fitted + dev),  alpha=.2,  fill='green')
ggp22
ggp2
graphset
head(holt_df)
head(graphset)
ggp2 <- ggplot(holt_df.melt,  aes(x=time, y=value)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp2
ggp2 <- ggplot(holt_df.melt,  aes(x=time, y=value)) + geom_vline(xintercept=max(actual_values$time),  lty=2) +
xlab('Time') + ylab('Value') +ggtitle("Holt Winters Exponential Smoothing")+ theme(plot.title = element_text(size = 15), legend.position = "none")
ggp2 <- ggp2 +
geom_ribbon(data = holt_df, aes(x=time, y=.data[[paste("Fitted", symbol, sep="")]], ymin=.data[[paste("Fitted",symbol,sep="")]]-.data[[paste("dev",symbol,sep="")]],  ymax=.data[[paste("Fitted",symbol,sep="")]] + .data[[paste("dev",symbol,sep="")]]),  alpha=.5,  fill='green') +
geom_line(aes(colour=variable), size=1)
ggp2
ggp1 <- ggplot(prophet_df, aes(x=ds)) + geom_vline(aes(xintercept=as.Date(input$end_date+1)), cex=0.8, col="steelblue4")+
ggtitle("Prophet's Time Series Forecasting")+ theme(plot.title = element_text(size = 15))
ggp1 <- ggp1 + geom_point(aes(y=.data[[paste("Price",symbol,sep="")]]), size=1) + geom_point(aes(y=.data[[paste("PriceX",symbol,sep="")]]), col="forestgreen", size=1) +
geom_line(aes(y=.data[[paste("yhat",symbol,sep="")]])) + geom_ribbon(aes(ymin=.data[[paste("yhat_lower",symbol,sep="")]], ymax=.data[[paste("yhat_upper",symbol,sep="")]]), fill="deepskyblue", alpha=0.5)
return(grid.arrange(ggp1,ggp2, ncol=2, top = textGrob("Portfolio Forecasted",gp=gpar(fontsize=20,font=2)) ))
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
x <- data.frame(x=c(1,2,3))
x$x
x$y <- NA
x$y
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
runApp('Documents/GitHub/Capstone/capstone_app')
shiny::runApp('Documents/GitHub/Capstone/capstone_app')
shiny::runApp('Documents/GitHub/Capstone/capstone_app')
shiny::runApp('Documents/GitHub/Capstone/capstone_app')
shiny::runApp('Documents/GitHub/Capstone/capstone_app')
setwd("~/Documents/GitHub/Capstone/two_file_app")
runApp("two_file_app")
setwd("~/Documents/Github/Capstone")
runApp("two_file_app")
shiny::runApp('two_file_app')
runApp('two_file_app')
runApp('two_file_app')
runApp('two_file_app')
runApp('two_file_app')
runApp('two_file_app')
runApp('two_file_app')
runApp('two_file_app')
runApp('two_file_app')
runApp('two_file_app')
runApp('two_file_app')
runApp('two_file_app')
runApp('two_file_app')
runApp('two_file_app')
runApp('two_file_app')
runApp('two_file_app')
runApp('two_file_app')
runApp('two_file_app')
